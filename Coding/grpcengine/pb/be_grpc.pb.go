// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HousingAnywhereSeviceClient is the client API for HousingAnywhereSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HousingAnywhereSeviceClient interface {
	CalcBreakEven(ctx context.Context, opts ...grpc.CallOption) (HousingAnywhereSevice_CalcBreakEvenClient, error)
}

type housingAnywhereSeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewHousingAnywhereSeviceClient(cc grpc.ClientConnInterface) HousingAnywhereSeviceClient {
	return &housingAnywhereSeviceClient{cc}
}

func (c *housingAnywhereSeviceClient) CalcBreakEven(ctx context.Context, opts ...grpc.CallOption) (HousingAnywhereSevice_CalcBreakEvenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HousingAnywhereSevice_serviceDesc.Streams[0], "/HousingAnywhereSevice/CalcBreakEven", opts...)
	if err != nil {
		return nil, err
	}
	x := &housingAnywhereSeviceCalcBreakEvenClient{stream}
	return x, nil
}

type HousingAnywhereSevice_CalcBreakEvenClient interface {
	Send(*BreakEvenRequest) error
	Recv() (*BreakEvenResponse, error)
	grpc.ClientStream
}

type housingAnywhereSeviceCalcBreakEvenClient struct {
	grpc.ClientStream
}

func (x *housingAnywhereSeviceCalcBreakEvenClient) Send(m *BreakEvenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *housingAnywhereSeviceCalcBreakEvenClient) Recv() (*BreakEvenResponse, error) {
	m := new(BreakEvenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HousingAnywhereSeviceServer is the server API for HousingAnywhereSevice service.
// All implementations must embed UnimplementedHousingAnywhereSeviceServer
// for forward compatibility
type HousingAnywhereSeviceServer interface {
	CalcBreakEven(HousingAnywhereSevice_CalcBreakEvenServer) error
	mustEmbedUnimplementedHousingAnywhereSeviceServer()
}

// UnimplementedHousingAnywhereSeviceServer must be embedded to have forward compatible implementations.
type UnimplementedHousingAnywhereSeviceServer struct {
}

func (UnimplementedHousingAnywhereSeviceServer) CalcBreakEven(HousingAnywhereSevice_CalcBreakEvenServer) error {
	return status.Errorf(codes.Unimplemented, "method CalcBreakEven not implemented")
}
func (UnimplementedHousingAnywhereSeviceServer) mustEmbedUnimplementedHousingAnywhereSeviceServer() {}

// UnsafeHousingAnywhereSeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HousingAnywhereSeviceServer will
// result in compilation errors.
type UnsafeHousingAnywhereSeviceServer interface {
	mustEmbedUnimplementedHousingAnywhereSeviceServer()
}

func RegisterHousingAnywhereSeviceServer(s grpc.ServiceRegistrar, srv HousingAnywhereSeviceServer) {
	s.RegisterService(&_HousingAnywhereSevice_serviceDesc, srv)
}

func _HousingAnywhereSevice_CalcBreakEven_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HousingAnywhereSeviceServer).CalcBreakEven(&housingAnywhereSeviceCalcBreakEvenServer{stream})
}

type HousingAnywhereSevice_CalcBreakEvenServer interface {
	Send(*BreakEvenResponse) error
	Recv() (*BreakEvenRequest, error)
	grpc.ServerStream
}

type housingAnywhereSeviceCalcBreakEvenServer struct {
	grpc.ServerStream
}

func (x *housingAnywhereSeviceCalcBreakEvenServer) Send(m *BreakEvenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *housingAnywhereSeviceCalcBreakEvenServer) Recv() (*BreakEvenRequest, error) {
	m := new(BreakEvenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HousingAnywhereSevice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HousingAnywhereSevice",
	HandlerType: (*HousingAnywhereSeviceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalcBreakEven",
			Handler:       _HousingAnywhereSevice_CalcBreakEven_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/be.proto",
}
